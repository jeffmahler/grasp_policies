#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# C++ version Copyright (c) 2006-2007 Erin Catto http://www.box2d.org
# Python version by Ken Lauer / sirkne at gmail dot com
# 
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
# 1. The origin of this software must not be misrepresented; you must not
# claim that you wrote the original software. If you use this software
# in a product, an acknowledgment in the product documentation would be
# appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not be
# misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.

"""
test_polygon.py
Creates polygon objects and places them in a scene

Author: Jeff Mahler
"""

from framework import *
from test_Bridge import create_bridge
from math import sqrt

def create_car(world, offset, wheel_radius, wheel_separation, density=1.0, 
               wheel_friction=0.9, scale=(1.0,1.0), chassis_vertices=None,
               wheel_axis=(0.0,1.0), wheel_torques=[20.0, 10.0], 
               wheel_drives=[True, False], hz=4.0, zeta=0.7, **kwargs):
    """
    """
    x_offset, y_offset=offset
    scale_x, scale_y=scale
    if chassis_vertices is None:
        chassis_vertices=[
			(-1.5, -0.5),
			( 1.5, -0.5),
			( 1.5,  0.0),
			( 0.0,  0.9),
			(-1.15, 0.9),
			(-1.5,  0.2),
            ]

    chassis_vertices=[(scale_x*x, scale_y*y) for x, y in chassis_vertices]
    radius_scale=sqrt(scale_x**2+scale_y**2)
    wheel_radius*=radius_scale
    
    chassis=world.CreateDynamicBody(
        position=(x_offset, y_offset),
        fixtures=b2FixtureDef(
                    shape=b2PolygonShape(vertices=chassis_vertices),
                    density=density,
                    )
        )

    wheels, springs=[], []
    wheel_xs=[-wheel_separation*scale_x/2.0, wheel_separation*scale_x/2.0]
    for x, torque, drive in zip(wheel_xs, wheel_torques, wheel_drives):
        wheel=world.CreateDynamicBody(
            position=(x_offset+x, y_offset-wheel_radius),
            fixtures=b2FixtureDef(
                        shape=b2CircleShape(radius=wheel_radius),
                        density=density,
                        )
            )
        
        spring=world.CreateWheelJoint(
            bodyA=chassis,
            bodyB=wheel,
            anchor=wheel.position,
            axis=wheel_axis,
            motorSpeed=0.0,
            maxMotorTorque=torque,
            enableMotor=drive,
            frequencyHz=hz,
            dampingRatio=zeta
            )

        wheels.append(wheel)
        springs.append(spring)

    return chassis, wheels, springs

class PolygonDemo(Framework):
    name="PolygonDemo"
    description="Keys: none"
    hz=4
    zeta=0.7
    def __init__(self):
        super(PolygonDemo, self).__init__()

        # The ground -- create some terrain
        ground=self.world.CreateStaticBody(
                    shapes=b2EdgeShape(vertices=[(-20,0),(20,0)]) 
                )

    def Keyboard(self, key):
        pass

    def Step(self, settings):
        super(PolygonDemo, self).Step(settings)
        self.Print("frequency = %g hz, damping ratio = %g" % (self.hz, self.zeta))

if __name__=="__main__":
     main(PolygonDemo)
